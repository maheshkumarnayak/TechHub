//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProductClient.ProductService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Product", Namespace="myModel")]
    [System.SerializableAttribute()]
    public partial class Product : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CPUField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescripationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float DiscountPerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double CPU {
            get {
                return this.CPUField;
            }
            set {
                if ((this.CPUField.Equals(value) != true)) {
                    this.CPUField = value;
                    this.RaisePropertyChanged("CPU");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Descripation {
            get {
                return this.DescripationField;
            }
            set {
                if ((object.ReferenceEquals(this.DescripationField, value) != true)) {
                    this.DescripationField = value;
                    this.RaisePropertyChanged("Descripation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float DiscountPer {
            get {
                return this.DiscountPerField;
            }
            set {
                if ((this.DiscountPerField.Equals(value) != true)) {
                    this.DiscountPerField = value;
                    this.RaisePropertyChanged("DiscountPer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetProductRequest", Namespace="http://schemas.datacontract.org/2004/07/ProductContract.Model")]
    [System.SerializableAttribute()]
    public partial class GetProductRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PageNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RecordInPageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageNumber {
            get {
                return this.PageNumberField;
            }
            set {
                if ((this.PageNumberField.Equals(value) != true)) {
                    this.PageNumberField = value;
                    this.RaisePropertyChanged("PageNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RecordInPage {
            get {
                return this.RecordInPageField;
            }
            set {
                if ((this.RecordInPageField.Equals(value) != true)) {
                    this.RecordInPageField = value;
                    this.RaisePropertyChanged("RecordInPage");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="myService", ConfigurationName="ProductService.IProductInfo")]
    public interface IProductInfo {
        
        [System.ServiceModel.OperationContractAttribute(Action="myService/IProductInfo/Insert", ReplyAction="myService/IProductInfo/InsertResponse")]
        ProductClient.ProductService.Product Insert(ProductClient.ProductService.Product product);
        
        [System.ServiceModel.OperationContractAttribute(Action="myService/IProductInfo/Insert", ReplyAction="myService/IProductInfo/InsertResponse")]
        System.Threading.Tasks.Task<ProductClient.ProductService.Product> InsertAsync(ProductClient.ProductService.Product product);
        
        [System.ServiceModel.OperationContractAttribute(Action="myService/IProductInfo/Update", ReplyAction="myService/IProductInfo/UpdateResponse")]
        ProductClient.ProductService.Product Update(ProductClient.ProductService.Product product);
        
        [System.ServiceModel.OperationContractAttribute(Action="myService/IProductInfo/Update", ReplyAction="myService/IProductInfo/UpdateResponse")]
        System.Threading.Tasks.Task<ProductClient.ProductService.Product> UpdateAsync(ProductClient.ProductService.Product product);
        
        [System.ServiceModel.OperationContractAttribute(Action="myService/IProductInfo/Get", ReplyAction="myService/IProductInfo/GetResponse")]
        ProductClient.ProductService.Product[] Get(ProductClient.ProductService.GetProductRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="myService/IProductInfo/Get", ReplyAction="myService/IProductInfo/GetResponse")]
        System.Threading.Tasks.Task<ProductClient.ProductService.Product[]> GetAsync(ProductClient.ProductService.GetProductRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="myService/IProductInfo/Delete", ReplyAction="myService/IProductInfo/DeleteResponse")]
        bool Delete(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="myService/IProductInfo/Delete", ReplyAction="myService/IProductInfo/DeleteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsync(int Id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProductInfoChannel : ProductClient.ProductService.IProductInfo, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProductInfoClient : System.ServiceModel.ClientBase<ProductClient.ProductService.IProductInfo>, ProductClient.ProductService.IProductInfo {
        
        public ProductInfoClient() {
        }
        
        public ProductInfoClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProductInfoClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductInfoClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductInfoClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ProductClient.ProductService.Product Insert(ProductClient.ProductService.Product product) {
            return base.Channel.Insert(product);
        }
        
        public System.Threading.Tasks.Task<ProductClient.ProductService.Product> InsertAsync(ProductClient.ProductService.Product product) {
            return base.Channel.InsertAsync(product);
        }
        
        public ProductClient.ProductService.Product Update(ProductClient.ProductService.Product product) {
            return base.Channel.Update(product);
        }
        
        public System.Threading.Tasks.Task<ProductClient.ProductService.Product> UpdateAsync(ProductClient.ProductService.Product product) {
            return base.Channel.UpdateAsync(product);
        }
        
        public ProductClient.ProductService.Product[] Get(ProductClient.ProductService.GetProductRequest request) {
            return base.Channel.Get(request);
        }
        
        public System.Threading.Tasks.Task<ProductClient.ProductService.Product[]> GetAsync(ProductClient.ProductService.GetProductRequest request) {
            return base.Channel.GetAsync(request);
        }
        
        public bool Delete(int Id) {
            return base.Channel.Delete(Id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsync(int Id) {
            return base.Channel.DeleteAsync(Id);
        }
    }
}
